defpackage core/parsed-path :
  import core
  import collections

;============================================================
;==================== Path Datastructure ====================
;============================================================
public defstruct ParsedPath <: Hashable&Equalable :
  entries: Tuple<PathElement>

public deftype PathElement <: Hashable&Equalable
public defstruct NamedPath <: PathElement: (name: String)
public defstruct UpPath <: PathElement
public defstruct CurrentPath <: PathElement
public defstruct RootPath <: PathElement
public defstruct DrivePath <: PathElement: (drive: Char)

;------------------------------------------------------------
;---------------------- Printing ----------------------------
;------------------------------------------------------------

defmethod print (o:OutputStream, p:ParsedPath) :
  print(o, format(p, CURRENT-PLATFORM))

defmethod print (o:OutputStream, e:PathElement) :
  print{o, _} $ match(e) :
    (e:NamedPath) : "NamedPath(%~)" % [name(e)]
    (e:UpPath) : "UpPath"
    (e:CurrentPath) : "CurrentPath"
    (e:RootPath) : "RootPath"
    (e:DrivePath) : "DrivePath(%~)" % [drive(e)]

;------------------------------------------------------------
;---------------- Hashing and Equality ----------------------
;------------------------------------------------------------

defmethod equal? (a:ParsedPath, b:ParsedPath) :
  entries(a) == entries(b)

defmethod hash (p:ParsedPath) :
  hash(entries(p))

defmethod equal? (a:PathElement, b:PathElement) :
  match(a, b) :
    (a:NamedPath, b:NamedPath) : name(a) == name(b)
    (a:UpPath, b:UpPath) : true
    (a:CurrentPath, b:CurrentPath) : true
    (a:RootPath, b:RootPath) : true
    (a:DrivePath, b:DrivePath) : drive(a) == drive(b)
    (a, b) : false

defmethod hash (e:PathElement) :
  match(e) :
    (e:NamedPath) : hash([13, name(e)])
    (e:UpPath) : 37
    (e:CurrentPath) : 41
    (e:RootPath) : 43
    (e:DrivePath) : hash([49, drive(e)])

;============================================================
;===================== Format Function ======================
;============================================================

public defmulti format (p:ParsedPath, platform:Platform) -> Printable

;------------------------------------------------------------
;--------------------- Formatting on POSIX ------------------
;------------------------------------------------------------

defmethod format (p:ParsedPath, platform:Linux|OS-X) :
  new Printable :
    defmethod print (o:OutputStream, this) :
      val es = entries(p)
      let loop (i:Int = 0, separator?:True|False = false) :
        if i < length(es) :
          print(o, '/') when separator?
          match(es[i]) :
            (e:RootPath) :
              print(o, '/')
              loop(i + 1, false)
            (e:CurrentPath) :
              print(o, '.')
              loop(i + 1, true)
            (e:UpPath) :
              print(o, "..")
              loop(i + 1, true)
            (e:NamedPath) :
              for c in name(e) do :
                val escape? = contains?(`('/' '\\' '\'' '\"'), c)
                print(o, '\\') when escape?
                print(o, c)
              loop(i + 1, true)

;------------------------------------------------------------
;--------------------- Formatting on Windows ----------------
;------------------------------------------------------------

defmethod format (p:ParsedPath, platform:Windows) :
  new Printable :
    defmethod print (o:OutputStream, this) :
      val es = entries(p)
      let loop (i:Int = 0, separator?:True|False = false) :
        if i < length(es) :
          print(o, '\\') when separator?
          match(es[i]) :
            (e:DrivePath) :
              print(o, "%_:\\" % [drive(e)])
              loop(i + 1, false)
            (e:CurrentPath) :
              print(o, '.')
              loop(i + 1, true)
            (e:UpPath) :
              print(o, "..")
              loop(i + 1, true)
            (e:NamedPath) :
              do(print{o, _}, name(e))
              loop(i + 1, true)

;============================================================
;===================== Parsing Function =====================
;============================================================
public defmulti parse-path (path:String, platform:Platform) -> ParsedPath

public defn parse-path (path:String) :
  parse-path(path, CURRENT-PLATFORM)

;------------------------------------------------------------
;---------------------- Parsing on POSIX --------------------
;------------------------------------------------------------
defmethod parse-path (path:String, platform:OS-X|Linux) -> ParsedPath :
  ;Collect path elements in this accumulator.
  val elements = Vector<PathElement>()

  ;Collect characters as we read them into this buffer.
  val buffer = StringBuffer()

  ;This function is called everytime we hit a delimiter.
  ;It makes a path element out of the characters in the buffer.
  defn make-path-element () :
    val name = to-string(buffer)
    clear(buffer)
    switch(name) :
      "" : false
      "." : add(elements, CurrentPath())
      ".." : add(elements, UpPath())
      else : add(elements, NamedPath(name))

  ;Parse header
  val start-index = 
    if prefix?(path, "/") :
      add(elements, RootPath())
      1
    else :
      0

  ;Parse remaining path
  val len = length(path)
  let loop (i:Int = start-index) :
    if i < len :
      val c = path[i]
      switch(path[i]) :
        '/' :
          make-path-element()
          loop(i + 1)
        '\\' :
          if i + 1 < len :
            add(buffer, path[i + 1])
            loop(i + 2)
          else :
            add(buffer, c)
            loop(i + 1)
        else :
          add(buffer, c)
          loop(i + 1)
    else :
      make-path-element()

  ;Form and normalize path
  normalize(ParsedPath(to-tuple(elements)))

;------------------------------------------------------------
;-------------------- Parsing on Windows --------------------
;------------------------------------------------------------
defmethod parse-path (path:String, platform:Windows) -> ParsedPath :
  ;Collect path elements in this accumulator
  val elements = Vector<PathElement>()

  ;Collect characters as we read them into this buffer.
  val buffer = StringBuffer()
  
  ;This function is called everytime we hit a delimiter.
  ;It makes a path element out of the characters in the buffer.
  defn make-path-element () :
    val name = to-string(buffer)
    clear(buffer)
    switch(name) :
      "" : false
      "." : add(elements, CurrentPath())
      ".." : add(elements, UpPath())
      else : add(elements, NamedPath(name))

  ;Track parsing process.
  var read-index:Int = 0
  val path-len = length(path)
  defn path-char (i:Int) -> Char|False :
    if read-index + i < path-len :
      path[read-index + i]
  defn eat-path-chars (n:Int) :
    read-index = read-index + n

  ;Parse the beginning drive letter.
  defn* parse-drive-letter? () :
    if path-char(1) == ':' :
      if path-char(2) != '\\' and path-char(2) != '/' :
        throw(IllegalDriveSpecifier(path))
      val c = path-char(0) as Char
      if not letter?(c) :
        throw(IllegalDriveLetter(path, c))
      add(elements, DrivePath(c))
      eat-path-chars(3)

  ;Parse the rest of the path elements
  defn* parse-elements () :
    val c = path-char(0)
    switch(c) :
      '/' :
        make-path-element()
        eat-path-chars(1)
        parse-elements()
      '\\' :
        make-path-element()
        eat-path-chars(1)
        parse-elements()
      ':' :
        throw(IllegalCharInPath(path, c as Char))
      '\'' :
        throw(IllegalCharInPath(path, c as Char))
      '"' :
        throw(IllegalCharInPath(path, c as Char))
      false :
        make-path-element()
      else :
        add(buffer, c as Char)
        eat-path-chars(1)
        parse-elements()

  ;Form and normalize path
  parse-drive-letter?()
  parse-elements()
  normalize(ParsedPath(to-tuple(elements)))

;============================================================
;==================== Normalization =========================
;============================================================
public defn normalize (path:ParsedPath) -> ParsedPath :
  val elements = Vector<PathElement>()
  for e in entries(path) do :
    match(e) :
      (e:NamedPath|RootPath|DrivePath) :
        add(elements, e)
      (e:CurrentPath) :
        false
      (e:UpPath) :
        if empty?(elements) :
          add(elements, e)
        else :
          match(peek(elements)) :
            (top:RootPath|DrivePath) : throw(UpPastRoot(path))
            (top:UpPath) : add(elements,e)
            (top:NamedPath) : pop(elements)
  add(elements, CurrentPath()) when empty?(elements)
  ParsedPath(to-tuple(elements))

;============================================================
;====================== Predicates ==========================
;============================================================

public defn absolute? (path:ParsedPath) :
  not empty?(entries(path)) and entries(path)[0] is RootPath|DrivePath

;============================================================
;===================== Utility Functions ====================
;============================================================

public defn relative-to-dir (dir:ParsedPath, path:ParsedPath) -> ParsedPath :
  val elements = Vector<PathElement>()
  if absolute?(path) :
    path
  else :
    normalize $ ParsedPath $ to-tuple $
    cat(entries(dir), entries(path))

public defn relative-to-dir (dir:ParsedPath, path:String) -> ParsedPath :
  relative-to-dir(dir, parse-path(path))

public defn enclosing-dir (path:ParsedPath) -> ParsedPath :
  relative-to-dir(path, ParsedPath([UpPath()]))

public defn enclosing-dir (path:String) -> ParsedPath :
  enclosing-dir(parse-path(path))

public defn relative-to-file (file:ParsedPath, path:ParsedPath) -> ParsedPath :
  relative-to-dir(enclosing-dir(file), path)

public defn relative-to-file (file:ParsedPath, path:String) -> ParsedPath :
  relative-to-file(file, parse-path(path))

;============================================================
;====================== Errors ==============================
;============================================================

public deftype PathParsingError <: Exception

public defstruct IllegalDriveSpecifier <: PathParsingError :
  path:String

defmethod print (o:OutputStream, e:IllegalDriveSpecifier) :
  print(o, "Path '%_' starts with an illegal drive specifier." % [path(e)])

public defstruct IllegalDriveLetter <: PathParsingError :
  path:String
  char:Char

defmethod print (o:OutputStream, e:IllegalDriveLetter) :
  print(o, "Path '%_' starts with an illegal drive character %~." % [path(e), char(e)])

public defstruct IllegalCharInPath <: PathParsingError :
  path:String
  char:Char

defmethod print (o:OutputStream, e:IllegalCharInPath) :
  print(o, "Path '%_' contains illegal character %~." % [path(e), char(e)])

public defstruct UpPastRoot <: PathParsingError :
  path: ParsedPath

defmethod print (o:OutputStream, e:UpPastRoot) :
  print(o, "Path '%_' uses '..' entries to traverse past the root directory." % [
    path(e)])