defpackage stz/asmjit :
  import core

extern jit_runtime_new: () -> ptr<?>
extern jit_runtime_delete: (ptr<?>) -> int
extern jit_runtime_add: (ptr<?>, ptr<?>) -> ptr<?>
extern jit_runtime_release: (ptr<?>, ptr<?>) -> int
extern code_holder_new: (ptr<?>) -> ptr<?>
extern code_holder_delete: (ptr<?>) -> int
extern code_holder_label_offset: (ptr<?>, ptr<?>) -> int
extern assembler_new: (ptr<?>) -> ptr<?>
extern assembler_delete: (ptr<?>) -> int
extern assembler_new_label: (ptr<?>) -> ptr<?>
extern assembler_bind: (ptr<?>, ptr<?>) -> int
extern assembler_push: (ptr<?>, ptr<?>) -> int
extern assembler_pop: (ptr<?>, ptr<?>) -> int
extern assembler_call_label: (ptr<?>, ptr<?>) -> int
extern assembler_call_reg: (ptr<?>, ptr<?>) -> int
extern assembler_ret: (ptr<?>) -> int
extern assembler_mov_const: (ptr<?>, ptr<?>, long) -> int
extern assembler_mov_label: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_movsx: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_movsxd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mov_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mov_xmm_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mov_reg_xmm: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mov_gp_ptr: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mov_ptr_gp: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_lea_ptr: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_jmp_label: (ptr<?>, ptr<?>) -> int
extern assembler_jmp_mem: (ptr<?>, ptr<?>) -> int
extern assembler_jmp_reg: (ptr<?>, ptr<?>) -> int
extern assembler_je: (ptr<?>, ptr<?>) -> int
extern assembler_jne: (ptr<?>, ptr<?>) -> int
extern assembler_js: (ptr<?>, ptr<?>) -> int
extern assembler_jns: (ptr<?>, ptr<?>) -> int
extern assembler_jg: (ptr<?>, ptr<?>) -> int
extern assembler_jge: (ptr<?>, ptr<?>) -> int
extern assembler_jl: (ptr<?>, ptr<?>) -> int
extern assembler_jle: (ptr<?>, ptr<?>) -> int
extern assembler_ja: (ptr<?>, ptr<?>) -> int
extern assembler_jae: (ptr<?>, ptr<?>) -> int
extern assembler_jb: (ptr<?>, ptr<?>) -> int
extern assembler_jbe: (ptr<?>, ptr<?>) -> int
extern assembler_add_int: (ptr<?>, ptr<?>, long) -> int
extern assembler_add_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_sub_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_imul_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_div_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mod_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_and_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_or_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_xor_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_not_reg: (ptr<?>, ptr<?>) -> int
extern assembler_neg_reg: (ptr<?>, ptr<?>) -> int
extern assembler_shl_int: (ptr<?>, ptr<?>, int) -> int
extern assembler_shr_int: (ptr<?>, ptr<?>, int) -> int
extern assembler_ashr_int: (ptr<?>, ptr<?>, int) -> int
extern assembler_shl_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_shr_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_ashr_reg: (ptr<?>, ptr<?>, ptr<?>) -> int

extern assembler_movss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_movsd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_cvtss2sd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_cvtsd2ss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_cvtsi2ss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_cvtsi2sd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_cvtss2si: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_cvtsd2si: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_addss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_addsd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_subss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_subsd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mulss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mulsd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_divss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_divsd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_minss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_minsd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_maxss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_maxsd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_sqrtss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_sqrtsd: (ptr<?>, ptr<?>, ptr<?>) -> int

extern assembler_cmp: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_ucomiss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_ucomisd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_set_e: (ptr<?>, ptr<?>) -> int
extern assembler_set_ne: (ptr<?>, ptr<?>) -> int
extern assembler_set_s: (ptr<?>, ptr<?>) -> int
extern assembler_set_ns: (ptr<?>, ptr<?>) -> int
extern assembler_set_g: (ptr<?>, ptr<?>) -> int
extern assembler_set_ge: (ptr<?>, ptr<?>) -> int
extern assembler_set_l: (ptr<?>, ptr<?>) -> int
extern assembler_set_le: (ptr<?>, ptr<?>) -> int
extern assembler_set_a: (ptr<?>, ptr<?>) -> int
extern assembler_set_ae: (ptr<?>, ptr<?>) -> int
extern assembler_set_b: (ptr<?>, ptr<?>) -> int
extern assembler_set_be: (ptr<?>, ptr<?>) -> int
extern x86_ptr_gp_base_const_offset_size: (ptr<?>, long, long) -> ptr<?>
extern x86_ptr_gp_base_index_const_shift_offset_size: (ptr<?>, ptr<?>, long, long, long) -> ptr<?>
extern x86_ptr_label_base_index_const_shift_offset_size: (ptr<?>, ptr<?>, long, long, long) -> ptr<?>
extern x86_ptr_label_base_const_index_size: (ptr<?>, long, long) -> ptr<?>
extern func_call: (ptr<?>) -> int
extern func_call1: (ptr<?>,long) -> int

extern assembler_embed_label: (ptr<?>, ptr<?>) -> int

extern x86_al: () -> ptr<?>
extern x86_bl: () -> ptr<?>
extern x86_cl: () -> ptr<?>
extern x86_dl: () -> ptr<?>
extern x86_eax: () -> ptr<?>
extern x86_ebx: () -> ptr<?>
extern x86_ecx: () -> ptr<?>
extern x86_edx: () -> ptr<?>
extern x86_rax: () -> ptr<?>
extern x86_rcx: () -> ptr<?>
extern x86_rdx: () -> ptr<?>
extern x86_rbx: () -> ptr<?>
extern x86_rsi: () -> ptr<?>
extern x86_rdi: () -> ptr<?>
extern x86_rsp: () -> ptr<?>
extern x86_rbp: () -> ptr<?>
extern x86_r8: () -> ptr<?>
extern x86_r9: () -> ptr<?>
extern x86_r10: () -> ptr<?>
extern x86_r11: () -> ptr<?>
extern x86_r12: () -> ptr<?>
extern x86_r13: () -> ptr<?>
extern x86_r14: () -> ptr<?>
extern x86_r15: () -> ptr<?>
extern x86_r14d: () -> ptr<?>
extern x86_r15d: () -> ptr<?>
extern x86_r14b: () -> ptr<?>
extern x86_r15b: () -> ptr<?>
extern x86_xmm0: () -> ptr<?>
extern x86_xmm1: () -> ptr<?>

public lostanza deftype JitRuntime :
  value: ptr<?>
public lostanza deftype CodeHolder :
  value: ptr<?>
public lostanza deftype Assembler :
  value: ptr<?>
public lostanza deftype Label :
  value: ptr<?>
public lostanza deftype Gp :
  value: ptr<?>
public lostanza deftype Xmm :
  value: ptr<?>
public lostanza deftype Func :
  value: ptr<?>
public lostanza deftype MemPtr :
  value: ptr<?>

public lostanza defn value (f:ref<Func>) -> ref<Long> :
  return new Long{f.value as long}

public lostanza defn MemPtr (base-ptr:ref<Gp>, offset:ref<Int>, size:ref<Int>) -> ref<MemPtr> :
  val p = call-c x86_ptr_gp_base_const_offset_size(base-ptr.value, offset.value, size.value)
  return new MemPtr{p}

public lostanza defn MemPtr (base-ptr:ref<Gp>, index-ptr:ref<Gp>, shift:ref<Int>, offset:ref<Int>, size:ref<Int>) -> ref<MemPtr> :
  val p = call-c x86_ptr_gp_base_index_const_shift_offset_size(base-ptr.value, index-ptr.value, shift.value, offset.value, size.value)
  return new MemPtr{p}

public lostanza defn MemPtr (base-ptr:ref<Label>, index-ptr:ref<Gp>, shift:ref<Int>, offset:ref<Int>, size:ref<Int>) -> ref<MemPtr> :
  val p = call-c x86_ptr_label_base_index_const_shift_offset_size(base-ptr.value, index-ptr.value, shift.value, offset.value, size.value)
  return new MemPtr{p}

public lostanza defn MemPtr (base-ptr:ref<Label>, index:ref<Int>, size:ref<Int>) -> ref<MemPtr> :
  val p = call-c x86_ptr_label_base_const_index_size(base-ptr.value, index.value, size.value)
  return new MemPtr{p}

public lostanza defn al () -> ref<Gp> :
  return new Gp{ call-c x86_al() }
public lostanza defn bl () -> ref<Gp> :
  return new Gp{ call-c x86_bl() }
public lostanza defn cl () -> ref<Gp> :
  return new Gp{ call-c x86_cl() }
public lostanza defn dl () -> ref<Gp> :
  return new Gp{ call-c x86_dl() }
public lostanza defn eax () -> ref<Gp> :
  return new Gp{ call-c x86_eax() }
public lostanza defn ebx () -> ref<Gp> :
  return new Gp{ call-c x86_ebx() }
public lostanza defn ecx () -> ref<Gp> :
  return new Gp{ call-c x86_ecx() }
public lostanza defn edx () -> ref<Gp> :
  return new Gp{ call-c x86_edx() }
public lostanza defn rax () -> ref<Gp> :
  return new Gp{ call-c x86_rax() }
public lostanza defn rcx () -> ref<Gp> :
  return new Gp{ call-c x86_rcx() }
public lostanza defn rdx () -> ref<Gp> :
  return new Gp{ call-c x86_rdx() }
public lostanza defn rbx () -> ref<Gp> :
  return new Gp{ call-c x86_rbx() }
public lostanza defn rsi () -> ref<Gp> :
  return new Gp{ call-c x86_rsi() }
public lostanza defn rdi () -> ref<Gp> :
  return new Gp{ call-c x86_rdi() }
public lostanza defn rsp () -> ref<Gp> :
  return new Gp{ call-c x86_rsp() }
public lostanza defn rbp () -> ref<Gp> :
  return new Gp{ call-c x86_rbp() }
public lostanza defn r8 () -> ref<Gp> :
  return new Gp{ call-c x86_r8() }
public lostanza defn r9 () -> ref<Gp> :
  return new Gp{ call-c x86_r9() }
public lostanza defn r10 () -> ref<Gp> :
  return new Gp{ call-c x86_r10() }
public lostanza defn r11 () -> ref<Gp> :
  return new Gp{ call-c x86_r11() }
public lostanza defn r12 () -> ref<Gp> :
  return new Gp{ call-c x86_r12() }
public lostanza defn r13 () -> ref<Gp> :
  return new Gp{ call-c x86_r13() }
public lostanza defn r14 () -> ref<Gp> :
  return new Gp{ call-c x86_r14() }
public lostanza defn r15 () -> ref<Gp> :
  return new Gp{ call-c x86_r15() }
public lostanza defn r14d () -> ref<Gp> :
  return new Gp{ call-c x86_r14d() }
public lostanza defn r15d () -> ref<Gp> :
  return new Gp{ call-c x86_r15d() }
public lostanza defn r14b () -> ref<Gp> :
  return new Gp{ call-c x86_r14b() }
public lostanza defn r15b () -> ref<Gp> :
  return new Gp{ call-c x86_r15b() }
public lostanza defn xmm0 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm0() }
public lostanza defn xmm1 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm1() }
public lostanza defn jit-runtime-new () -> ref<JitRuntime> :
  return new JitRuntime{ call-c jit_runtime_new() }
public lostanza defn delete (rt:ref<JitRuntime>) -> ref<False> :
  call-c jit_runtime_delete(rt.value)
  return false
public lostanza defn add (rt:ref<JitRuntime>, c:ref<CodeHolder>) -> ref<Func> :
  return new Func{ call-c jit_runtime_add(rt.value, c.value) }
public lostanza defn release (rt:ref<JitRuntime>, func:ref<Func>) -> ref<False> :
  call-c jit_runtime_release(rt.value, func.value)
  return false
public lostanza defn code-holder-new (rt:ref<JitRuntime>) -> ref<CodeHolder> :
  return new CodeHolder{ call-c code_holder_new(rt.value) }
public lostanza defn delete (c:ref<CodeHolder>) -> ref<False> :
  call-c jit_runtime_delete(c.value)
  return false
public lostanza defn label-offset (c:ref<CodeHolder>, f:ref<Label>) -> ref<Int> :
  return new Int{ call-c code_holder_label_offset(c.value, f.value) }
public lostanza defn assembler-new (c:ref<CodeHolder>) -> ref<Assembler> :
  return new Assembler{ call-c assembler_new(c.value) }
public lostanza defn new-label (a:ref<Assembler>) -> ref<Label> :
  return new Label{ call-c assembler_new_label(a.value) }
public lostanza defn delete (a:ref<Assembler>) -> ref<False> :
  call-c assembler_delete(a.value)
  return false
public lostanza defn bind (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_bind(a.value, lab.value)
  return false
public lostanza defn push (a:ref<Assembler>, reg:ref<Gp>) -> ref<False> :
  call-c assembler_push(a.value, reg.value)
  return false
public lostanza defn pop (a:ref<Assembler>, reg:ref<Gp>) -> ref<False> :
  call-c assembler_pop(a.value, reg.value)
  return false
public lostanza defn call (a:ref<Assembler>, f:ref<Label>) -> ref<False> :
  call-c assembler_call_label(a.value, f.value)
  return false
public lostanza defn call (a:ref<Assembler>, f:ref<Gp>) -> ref<False> :
  call-c assembler_call_reg(a.value, f.value)
  return false
public lostanza defn ret (a:ref<Assembler>) -> ref<False> :
  call-c assembler_ret(a.value)
  return false
public lostanza defn add (a:ref<Assembler>, reg:ref<Gp>, value:ref<Int>) -> ref<False> :
  call-c assembler_add_int(a.value, reg.value, value.value)
  return false
public lostanza defn add (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_add_reg(a.value, dst.value, src.value)
  return false
public lostanza defn imul (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_imul_reg(a.value, dst.value, src.value)
  return false
public lostanza defn div (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_div_reg(a.value, dst.value, src.value)
  return false
public lostanza defn mod (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_mod_reg(a.value, dst.value, src.value)
  return false
public lostanza defn and-op (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_and_reg(a.value, dst.value, src.value)
  return false
public lostanza defn or-op (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_or_reg(a.value, dst.value, src.value)
  return false
public lostanza defn xor-op (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_xor_reg(a.value, dst.value, src.value)
  return false
public lostanza defn not-op (a:ref<Assembler>, dst:ref<Gp>) -> ref<False> :
  call-c assembler_not_reg(a.value, dst.value)
  return false
public lostanza defn neg (a:ref<Assembler>, dst:ref<Gp>) -> ref<False> :
  call-c assembler_neg_reg(a.value, dst.value)
  return false
public lostanza defn sub (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_sub_reg(a.value, dst.value, src.value)
  return false
public lostanza defn shl (a:ref<Assembler>, reg:ref<Gp>, value:ref<Int>) -> ref<False> :
  call-c assembler_shl_int(a.value, reg.value, value.value)
  return false
public lostanza defn shr (a:ref<Assembler>, reg:ref<Gp>, value:ref<Int>) -> ref<False> :
  call-c assembler_shr_int(a.value, reg.value, value.value)
  return false
public lostanza defn ashr (a:ref<Assembler>, reg:ref<Gp>, value:ref<Int>) -> ref<False> :
  call-c assembler_ashr_int(a.value, reg.value, value.value)
  return false
public lostanza defn shl (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_shl_reg(a.value, dst.value, src.value)
  return false
public lostanza defn shr (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_shr_reg(a.value, dst.value, src.value)
  return false
public lostanza defn ashr (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_ashr_reg(a.value, dst.value, src.value)
  return false
public lostanza defn mov (a:ref<Assembler>, reg:ref<Gp>, value:ref<Long>) -> ref<False> :
  call-c assembler_mov_const(a.value, reg.value, value.value)
  return false
public lostanza defn mov (a:ref<Assembler>, reg:ref<Gp>, value:ref<Label>) -> ref<False> :
  call-c assembler_mov_label(a.value, reg.value, value.value)
  return false
public lostanza defn movsx (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_movsx(a.value, dst.value, src.value)
  return false
public lostanza defn movsxd (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_movsxd(a.value, dst.value, src.value)
  return false
public lostanza defn mov (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<False> :
  call-c assembler_mov_reg(a.value, dst.value, src.value)
  return false
public lostanza defn mov (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Gp>) -> ref<False> :
  call-c assembler_mov_xmm_reg(a.value, dst.value, src.value)
  return false
public lostanza defn mov (a:ref<Assembler>, dst:ref<Gp>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_mov_reg_xmm(a.value, dst.value, src.value)
  return false
public lostanza defn mov (a:ref<Assembler>, reg:ref<Gp>, ptr:ref<MemPtr>) -> ref<False> :
  call-c assembler_mov_gp_ptr(a.value, reg.value, ptr.value)
  return false
public lostanza defn mov (a:ref<Assembler>, ptr:ref<MemPtr>, reg:ref<Gp>) -> ref<False> :
  call-c assembler_mov_ptr_gp(a.value, ptr.value, reg.value)
  return false
public lostanza defn call (func:ref<Func>) -> ref<Long> :
  return new Long{ call-c func_call(func.value) }
public lostanza defn call (func:ref<Func>, arg:ptr<?>) -> ref<Long> :
  return new Long{ call-c func_call1(func.value, arg as long) }
public lostanza defn lea (a:ref<Assembler>, reg:ref<Gp>, ptr:ref<MemPtr>) -> ref<False> :
  call-c assembler_lea_ptr(a.value, reg.value, ptr.value)
  return false
public lostanza defn cmp (a:ref<Assembler>, x:ref<Gp>, y:ref<Gp>) -> ref<False> :
  call-c assembler_cmp(a.value, x.value, y.value)
  return false
public lostanza defn set-e (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_e(a.value, x.value)
  return false
public lostanza defn set-ne (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_ne(a.value, x.value)
  return false
public lostanza defn set-s (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_s(a.value, x.value)
  return false
public lostanza defn set-ns (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_ns(a.value, x.value)
  return false
public lostanza defn set-g (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_g(a.value, x.value)
  return false
public lostanza defn set-ge (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_ge(a.value, x.value)
  return false
public lostanza defn set-l (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_l(a.value, x.value)
  return false
public lostanza defn set-le (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_le(a.value, x.value)
  return false
public lostanza defn set-a (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_a(a.value, x.value)
  return false
public lostanza defn set-ae (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_ae(a.value, x.value)
  return false
public lostanza defn set-b (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_b(a.value, x.value)
  return false
public lostanza defn set-be (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_be(a.value, x.value)
  return false

public lostanza defn jmp (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jmp_label(a.value, lab.value)
  return false
public lostanza defn jmp (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_jmp_reg(a.value, x.value)
  return false
public lostanza defn jmp (a:ref<Assembler>, ptr:ref<MemPtr>) -> ref<False> :
  call-c assembler_jmp_label(a.value, ptr.value)
  return false
public lostanza defn je (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_je(a.value, lab.value)
  return false
public lostanza defn jne (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jne(a.value, lab.value)
  return false
public lostanza defn js (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_js(a.value, lab.value)
  return false
public lostanza defn jns (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jns(a.value, lab.value)
  return false
public lostanza defn jg (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jg(a.value, lab.value)
  return false
public lostanza defn jge (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jge(a.value, lab.value)
  return false
public lostanza defn jl (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jl(a.value, lab.value)
  return false
public lostanza defn jle (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jle(a.value, lab.value)
  return false
public lostanza defn ja (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_ja(a.value, lab.value)
  return false
public lostanza defn jae (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jae(a.value, lab.value)
  return false
public lostanza defn jb (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jb(a.value, lab.value)
  return false
public lostanza defn jbe (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jbe(a.value, lab.value)
  return false

public lostanza defn movss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_movss(a.value, dst.value, src.value)
  return false
public lostanza defn movsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_movsd(a.value, dst.value, src.value)
  return false
public lostanza defn cvtsd2ss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_cvtsd2ss(a.value, dst.value, src.value)
  return false
public lostanza defn cvtss2sd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_cvtss2sd(a.value, dst.value, src.value)
  return false
public lostanza defn cvtsi2ss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Gp>) -> ref<False> :
  call-c assembler_cvtsi2ss(a.value, dst.value, src.value)
  return false
public lostanza defn cvtsi2sd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Gp>) -> ref<False> :
  call-c assembler_cvtsi2sd(a.value, dst.value, src.value)
  return false
public lostanza defn cvtss2si (a:ref<Assembler>, dst:ref<Gp>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_cvtss2si(a.value, dst.value, src.value)
  return false
public lostanza defn cvtsd2si (a:ref<Assembler>, dst:ref<Gp>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_cvtsd2si(a.value, dst.value, src.value)
  return false
public lostanza defn addss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_addss(a.value, dst.value, src.value)
  return false
public lostanza defn addsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_addsd(a.value, dst.value, src.value)
  return false
public lostanza defn subss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_subss(a.value, dst.value, src.value)
  return false
public lostanza defn subsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_subsd(a.value, dst.value, src.value)
  return false
public lostanza defn mulss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_mulss(a.value, dst.value, src.value)
  return false
public lostanza defn mulsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_mulsd(a.value, dst.value, src.value)
  return false
public lostanza defn divss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_divss(a.value, dst.value, src.value)
  return false
public lostanza defn divsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_divsd(a.value, dst.value, src.value)
  return false
public lostanza defn minss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_minss(a.value, dst.value, src.value)
  return false
public lostanza defn minsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_minsd(a.value, dst.value, src.value)
  return false
public lostanza defn maxss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_maxss(a.value, dst.value, src.value)
  return false
public lostanza defn maxsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_maxsd(a.value, dst.value, src.value)
  return false
public lostanza defn sqrtss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_sqrtss(a.value, dst.value, src.value)
  return false
public lostanza defn sqrtsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_sqrtsd(a.value, dst.value, src.value)
  return false
public lostanza defn ucomiss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_ucomiss(a.value, dst.value, src.value)
  return false
public lostanza defn ucomisd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_ucomisd(a.value, dst.value, src.value)
  return false

public lostanza defn embed (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_embed_label(a.value, lab.value)
  return false