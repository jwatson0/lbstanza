defpackage stz/vm-encoder :
  import core
  import collections
  import stz/vm-ir
  import stz/typeset
  import stz/vm-ids
  import stz/basic-ops
  import stz/call-records
  import stz/backend
  import stz/utils
  import stz/set-utils
  import stz/conversion-utils
  import stz/dispatch-dag
  import core/stack-trace
  import stz/asmjit

public deftype VMEncoder

public deftype EncodingResolver
public defmulti liveness-map (r:EncodingResolver, live:Tuple<Int>, num-locals:Int) -> Int
public defmulti object-header-size (r:EncodingResolver) -> Int
public defmulti object-size-on-heap (r:EncodingResolver, sz:Int) -> Int
public defmulti stack-size (r:EncodingResolver) -> Int
public defmulti dispatch-format (r:EncodingResolver, branches:Tuple<Tuple<TypeSet>>) -> Int
public defmulti match-format (r:EncodingResolver, branches:Tuple<Tuple<TypeSet>>) -> Int
public defmulti method-format (r:EncodingResolver, multi:Int, num-header-args:Int, num-args:Int) -> Int
public defmulti marker (r:EncodingResolver, type:Int) -> Int
public defmulti void-marker (r:EncodingResolver) -> Int
public defmulti ref-offset (r:EncodingResolver) -> Int
public defmulti type-is-final? (r:EncodingResolver, n:Int) -> True|False
public defmulti marker? (r:EncodingResolver, n:Int) -> True|False
public defmulti tagbits (r:EncodingResolver, typeid:Int) -> Int

public defstruct EncodedFunction :
  jit?: True|False
  func: ByteBuffer|Func
  trace-entries: Vector<TraceTableEntry>

public defstruct TraceTableEntry :
  pc: Int
  entry: StackTraceEntry

public defmulti encode (enc:VMEncoder, fid:Int, func:VMFunction, resolver:EncodingResolver, backend:Backend) -> EncodedFunction

;============================================================
;======================= Opcodes ============================
;============================================================

public val SET-OPCODE-LOCAL = 0
public val SET-OPCODE-UNSIGNED = 1
public val SET-OPCODE-SIGNED = 2
public val SET-OPCODE-CODE = 3
public val SET-OPCODE-GLOBAL = 5
public val SET-OPCODE-DATA = 6
public val SET-OPCODE-CONST = 7
public val SET-OPCODE-WIDE = 8
public val SET-REG-OPCODE-LOCAL = 9
public val SET-REG-OPCODE-UNSIGNED = 10
public val SET-REG-OPCODE-SIGNED = 11
public val SET-REG-OPCODE-CODE = 12
public val SET-REG-OPCODE-GLOBAL = 14
public val SET-REG-OPCODE-DATA = 15
public val SET-REG-OPCODE-CONST = 16
public val SET-REG-OPCODE-WIDE = 17
public val GET-REG-OPCODE = 18
public val CALL-OPCODE-LOCAL = 19
public val CALL-OPCODE-CODE = 20
public val CALL-CLOSURE-OPCODE = 22
public val TCALL-OPCODE-LOCAL = 23
public val TCALL-OPCODE-CODE = 24
public val TCALL-CLOSURE-OPCODE = 26
public val CALLC-OPCODE-LOCAL = 27
public val CALLC-OPCODE-WIDE = 28
public val POP-FRAME-OPCODE = 30
public val LIVE-OPCODE = 31
public val YIELD-OPCODE = 32
public val RETURN-OPCODE = 33
public val DUMP-OPCODE = 34
;2-arity operations
public val INT-ADD-OPCODE = 35
public val INT-SUB-OPCODE = 36
public val INT-MUL-OPCODE = 37
public val INT-DIV-OPCODE = 38
public val INT-MOD-OPCODE = 39
public val INT-AND-OPCODE = 40
public val INT-OR-OPCODE = 41
public val INT-XOR-OPCODE = 42
public val INT-SHL-OPCODE = 43
public val INT-SHR-OPCODE = 44
public val INT-ASHR-OPCODE = 45
public val INT-LT-OPCODE = 46
public val INT-GT-OPCODE = 47
public val INT-LE-OPCODE = 48
public val INT-GE-OPCODE = 49
public val REF-EQ-OPCODE = 50
public val EQ-OPCODE-REF = 51
public val EQ-OPCODE-BYTE = 52
public val EQ-OPCODE-INT = 53
public val EQ-OPCODE-LONG = 54
public val EQ-OPCODE-FLOAT = 55
public val EQ-OPCODE-DOUBLE = 56
public val REF-NE-OPCODE = 57
public val NE-OPCODE-REF = 58
public val NE-OPCODE-BYTE = 59
public val NE-OPCODE-INT = 60
public val NE-OPCODE-LONG = 61
public val NE-OPCODE-FLOAT = 62
public val NE-OPCODE-DOUBLE = 63
public val ADD-OPCODE-BYTE = 64
public val ADD-OPCODE-INT = 65
public val ADD-OPCODE-LONG = 66
public val ADD-OPCODE-FLOAT = 67
public val ADD-OPCODE-DOUBLE = 68
public val SUB-OPCODE-BYTE = 69
public val SUB-OPCODE-INT = 70
public val SUB-OPCODE-LONG = 71
public val SUB-OPCODE-FLOAT = 72
public val SUB-OPCODE-DOUBLE = 73
public val MUL-OPCODE-BYTE = 74
public val MUL-OPCODE-INT = 75
public val MUL-OPCODE-LONG = 76
public val MUL-OPCODE-FLOAT = 77
public val MUL-OPCODE-DOUBLE = 78
public val DIV-OPCODE-BYTE = 79
public val DIV-OPCODE-INT = 80
public val DIV-OPCODE-LONG = 81
public val DIV-OPCODE-FLOAT = 82
public val DIV-OPCODE-DOUBLE = 83
public val MOD-OPCODE-BYTE = 84
public val MOD-OPCODE-INT = 85
public val MOD-OPCODE-LONG = 86
public val AND-OPCODE-BYTE = 87
public val AND-OPCODE-INT = 88
public val AND-OPCODE-LONG = 89
public val OR-OPCODE-BYTE = 90
public val OR-OPCODE-INT = 91
public val OR-OPCODE-LONG = 92
public val XOR-OPCODE-BYTE = 93
public val XOR-OPCODE-INT = 94
public val XOR-OPCODE-LONG = 95
public val SHL-OPCODE-BYTE = 96
public val SHL-OPCODE-INT = 97
public val SHL-OPCODE-LONG = 98
public val SHR-OPCODE-BYTE = 99
public val SHR-OPCODE-INT = 100
public val SHR-OPCODE-LONG = 101
public val ASHR-OPCODE-INT = 103
public val ASHR-OPCODE-LONG = 104
public val LT-OPCODE-INT = 105
public val LT-OPCODE-LONG = 106
public val LT-OPCODE-FLOAT = 107
public val LT-OPCODE-DOUBLE = 108
public val GT-OPCODE-INT = 109
public val GT-OPCODE-LONG = 110
public val GT-OPCODE-FLOAT = 111
public val GT-OPCODE-DOUBLE = 112
public val LE-OPCODE-INT = 113
public val LE-OPCODE-LONG = 114
public val LE-OPCODE-FLOAT = 115
public val LE-OPCODE-DOUBLE = 116
public val GE-OPCODE-INT = 117
public val GE-OPCODE-LONG = 118
public val GE-OPCODE-FLOAT = 119
public val GE-OPCODE-DOUBLE = 120
public val ULE-OPCODE-BYTE = 121
public val ULE-OPCODE-INT = 122
public val ULE-OPCODE-LONG = 123
public val ULT-OPCODE-BYTE = 124
public val ULT-OPCODE-INT = 125
public val ULT-OPCODE-LONG = 126
public val UGT-OPCODE-BYTE = 127
public val UGT-OPCODE-INT = 128
public val UGT-OPCODE-LONG = 129
public val UGE-OPCODE-BYTE = 130
public val UGE-OPCODE-INT = 131
public val UGE-OPCODE-LONG = 132
;1-arity operations
public val INT-NOT-OPCODE = 133
public val INT-NEG-OPCODE = 134
public val NOT-OPCODE-BYTE = 135
public val NOT-OPCODE-INT = 136
public val NOT-OPCODE-LONG = 137
public val NEG-OPCODE-INT = 138
public val NEG-OPCODE-LONG = 139
public val NEG-OPCODE-FLOAT = 140
public val NEG-OPCODE-DOUBLE = 141
public val DEREF-OPCODE = 142
public val TYPEOF-OPCODE = 143
;branch operation
public val JUMP-SET-OPCODE = 144
public val JUMP-TAGBITS-OPCODE = 240
public val JUMP-TAGWORD-OPCODE = 242
public val GOTO-OPCODE = 145
;conversion operations
public val CONV-OPCODE-BYTE-FLOAT = 146
public val CONV-OPCODE-BYTE-DOUBLE = 147
public val CONV-OPCODE-INT-BYTE = 148
public val CONV-OPCODE-INT-FLOAT = 149
public val CONV-OPCODE-INT-DOUBLE = 150
public val CONV-OPCODE-LONG-BYTE = 151
public val CONV-OPCODE-LONG-INT = 152
public val CONV-OPCODE-LONG-FLOAT = 153
public val CONV-OPCODE-LONG-DOUBLE = 154
public val CONV-OPCODE-FLOAT-BYTE = 155
public val CONV-OPCODE-FLOAT-INT = 156
public val CONV-OPCODE-FLOAT-LONG = 157
public val CONV-OPCODE-FLOAT-DOUBLE = 158
public val CONV-OPCODE-DOUBLE-BYTE = 159
public val CONV-OPCODE-DOUBLE-INT = 160
public val CONV-OPCODE-DOUBLE-LONG = 161
public val CONV-OPCODE-DOUBLE-FLOAT = 162
;tagging operations
public val DETAG-OPCODE = 163
public val TAG-OPCODE-BYTE = 164
public val TAG-OPCODE-CHAR = 165
public val TAG-OPCODE-INT = 166
public val TAG-OPCODE-FLOAT = 167
;storing operations
public val STORE-OPCODE-1 = 168
public val STORE-OPCODE-4 = 169
public val STORE-OPCODE-8 = 170
public val STORE-OPCODE-1-VAR-OFFSET = 171
public val STORE-OPCODE-4-VAR-OFFSET = 172
public val STORE-OPCODE-8-VAR-OFFSET = 173
;loading operations
public val LOAD-OPCODE-1 = 174
public val LOAD-OPCODE-4 = 175
public val LOAD-OPCODE-8 = 176
public val LOAD-OPCODE-1-VAR-OFFSET = 177
public val LOAD-OPCODE-4-VAR-OFFSET = 178
public val LOAD-OPCODE-8-VAR-OFFSET = 179
;Allocation
public val RESERVE-OPCODE-LOCAL = 180
public val RESERVE-OPCODE-CONST = 181
public val ENTER-STACK-OPCODE = 182
public val ALLOC-OPCODE-CONST = 183
public val ALLOC-OPCODE-LOCAL = 184
;system operations
public val GC-OPCODE = 185
public val CLASS-NAME-OPCODE = 241
public val C-RSP-OPCODE = 243
public val PRINT-STACK-TRACE-OPCODE = 186
public val COLLECT-STACK-TRACE-OPCODE = 187
public val FLUSH-VM-OPCODE = 188
;2-arity branch operations
public val JUMP-INT-LT-OPCODE = 192
public val JUMP-INT-GT-OPCODE = 193
public val JUMP-INT-LE-OPCODE = 194
public val JUMP-INT-GE-OPCODE = 195
public val JUMP-EQ-OPCODE-REF = 196
public val JUMP-EQ-OPCODE-BYTE = 197
public val JUMP-EQ-OPCODE-INT = 198
public val JUMP-EQ-OPCODE-LONG = 199
public val JUMP-EQ-OPCODE-FLOAT = 200
public val JUMP-EQ-OPCODE-DOUBLE = 201
public val JUMP-NE-OPCODE-REF = 202
public val JUMP-NE-OPCODE-BYTE = 203
public val JUMP-NE-OPCODE-INT = 204
public val JUMP-NE-OPCODE-LONG = 205
public val JUMP-NE-OPCODE-FLOAT = 206
public val JUMP-NE-OPCODE-DOUBLE = 207
public val JUMP-LT-OPCODE-INT = 208
public val JUMP-LT-OPCODE-LONG = 209
public val JUMP-LT-OPCODE-FLOAT = 210
public val JUMP-LT-OPCODE-DOUBLE = 211
public val JUMP-GT-OPCODE-INT = 212
public val JUMP-GT-OPCODE-LONG = 213
public val JUMP-GT-OPCODE-FLOAT = 214
public val JUMP-GT-OPCODE-DOUBLE = 215
public val JUMP-LE-OPCODE-INT = 216
public val JUMP-LE-OPCODE-LONG = 217
public val JUMP-LE-OPCODE-FLOAT = 218
public val JUMP-LE-OPCODE-DOUBLE = 219
public val JUMP-GE-OPCODE-INT = 220
public val JUMP-GE-OPCODE-LONG = 221
public val JUMP-GE-OPCODE-FLOAT = 222
public val JUMP-GE-OPCODE-DOUBLE = 223
public val JUMP-ULE-OPCODE-BYTE = 224
public val JUMP-ULE-OPCODE-INT = 225
public val JUMP-ULE-OPCODE-LONG = 226
public val JUMP-ULT-OPCODE-BYTE = 227
public val JUMP-ULT-OPCODE-INT = 228
public val JUMP-ULT-OPCODE-LONG = 229
public val JUMP-UGT-OPCODE-BYTE = 230
public val JUMP-UGT-OPCODE-INT = 231
public val JUMP-UGT-OPCODE-LONG = 232
public val JUMP-UGE-OPCODE-BYTE = 233
public val JUMP-UGE-OPCODE-INT = 234
public val JUMP-UGE-OPCODE-LONG = 235
;dispatch operation
public val DISPATCH-OPCODE = 236
public val DISPATCH-METHOD-OPCODE = 237
;jump on register
public val JUMP-REG-OPCODE = 238
;function entry
public val FNENTRY-OPCODE = 239

public defn set-reg-opcode (y:VMImm) :
  match(y) :
    (y:Local) : SET-REG-OPCODE-LOCAL
    (y:NumConst) :
      match(value(y)) :
        (v:Char) : SET-REG-OPCODE-UNSIGNED
        (v:Byte) : SET-REG-OPCODE-UNSIGNED
        (v:Int) : SET-REG-OPCODE-UNSIGNED
        (v:Long) : SET-REG-OPCODE-WIDE  ;OR SIGNED
        (v:Float) : SET-REG-OPCODE-UNSIGNED
        (v:Double) : SET-REG-OPCODE-WIDE
    (y:Marker) : SET-REG-OPCODE-UNSIGNED
    (y:Tag) : SET-REG-OPCODE-UNSIGNED
    (y:CodeId) : SET-REG-OPCODE-CODE
    (y:ExternId) : SET-REG-OPCODE-WIDE
    (y:GlobalId) : SET-REG-OPCODE-GLOBAL
    (y:DataId) : SET-REG-OPCODE-DATA
    (y:ConstId) : SET-REG-OPCODE-CONST
    (y:VoidMarker) : SET-REG-OPCODE-UNSIGNED

public defn set-opcode (y:VMImm) :
  match(y) :
    (y:Local) : SET-OPCODE-LOCAL
    (y:NumConst) :
      match(value(y)) :
        (v:Char) : SET-OPCODE-UNSIGNED
        (v:Byte) : SET-OPCODE-UNSIGNED
        (v:Int) : SET-OPCODE-UNSIGNED
        (v:Long) : SET-OPCODE-WIDE  ;OR SIGNED
        (v:Float) : SET-OPCODE-UNSIGNED
        (v:Double) : SET-OPCODE-WIDE
    (y:Marker) : SET-OPCODE-UNSIGNED
    (y:Tag) : SET-OPCODE-UNSIGNED
    (y:CodeId) : SET-OPCODE-CODE
    (y:ExternId) : SET-OPCODE-WIDE
    (y:GlobalId) : SET-OPCODE-GLOBAL
    (y:DataId) : SET-OPCODE-DATA
    (y:ConstId) : SET-OPCODE-CONST
    (y:VoidMarker) : SET-OPCODE-UNSIGNED

public defn call-opcode (f:VMImm) :
  match(f) :
    (f:Local) : CALL-OPCODE-LOCAL
    (f:CodeId) : CALL-OPCODE-CODE

public defn callc-opcode (f:VMImm) :
  match(f) :
    (f:Local) : CALLC-OPCODE-LOCAL
    (f:ExternId) :  CALLC-OPCODE-WIDE

public defn tcall-opcode (f:VMImm) :
  match(f) :
    (f:Local) : TCALL-OPCODE-LOCAL
    (f:CodeId) : TCALL-OPCODE-CODE

public defn store-opcode (offset:VMImm|False, val-type:VMType) :
  match(offset, val-type) :
    (o:False, vt:VMByte) : STORE-OPCODE-1
    (o:False, vt:VMInt) : STORE-OPCODE-4
    (o:False, vt:VMLong) : STORE-OPCODE-8
    (o:False, vt:VMFloat) : STORE-OPCODE-4
    (o:False, vt:VMDouble) : STORE-OPCODE-8
    (o:False, vt:VMRef) : STORE-OPCODE-8
    (o:VMImm, vt:VMByte) : STORE-OPCODE-1-VAR-OFFSET
    (o:VMImm, vt:VMInt) : STORE-OPCODE-4-VAR-OFFSET
    (o:VMImm, vt:VMLong) : STORE-OPCODE-8-VAR-OFFSET
    (o:VMImm, vt:VMFloat) : STORE-OPCODE-4-VAR-OFFSET
    (o:VMImm, vt:VMDouble) : STORE-OPCODE-8-VAR-OFFSET
    (o:VMImm, vt:VMRef) : STORE-OPCODE-8-VAR-OFFSET

public defn load-opcode (offset:VMImm|False, xtype:VMType) :
  match(offset, xtype) :
    (o:False, xt:VMByte) : LOAD-OPCODE-1
    (o:False, xt:VMInt) : LOAD-OPCODE-4
    (o:False, xt:VMLong) : LOAD-OPCODE-8
    (o:False, xt:VMFloat) : LOAD-OPCODE-4
    (o:False, xt:VMDouble) : LOAD-OPCODE-8
    (o:False, xt:VMRef) : LOAD-OPCODE-8
    (o:VMImm, xt:VMByte) : LOAD-OPCODE-1-VAR-OFFSET
    (o:VMImm, xt:VMInt) : LOAD-OPCODE-4-VAR-OFFSET
    (o:VMImm, xt:VMLong) : LOAD-OPCODE-8-VAR-OFFSET
    (o:VMImm, xt:VMFloat) : LOAD-OPCODE-4-VAR-OFFSET
    (o:VMImm, xt:VMDouble) : LOAD-OPCODE-8-VAR-OFFSET
    (o:VMImm, xt:VMRef) : LOAD-OPCODE-8-VAR-OFFSET

public defn op0-opcode (op:VMOp) :
  match(op) :
    (op:FlushVMOp) : FLUSH-VM-OPCODE
    (op:CRSPOp) : C-RSP-OPCODE

;Returns false if operation becomes a set operation.
public defn op1-opcode (op:VMOp, xt:VMType, yt:VMType) -> Int|False :
  match(op, xt, yt) :
    (op:IntNotOp, xt:VMRef, yt:VMRef) : INT-NOT-OPCODE
    (op:IntNegOp, xt:VMRef, yt:VMRef) : INT-NEG-OPCODE
    (op:NotOp, xt:VMByte, yt:VMByte) : NOT-OPCODE-BYTE
    (op:NotOp, xt:VMInt, yt:VMInt) : NOT-OPCODE-INT
    (op:NotOp, xt:VMLong, yt:VMLong) : NOT-OPCODE-LONG
    (op:NegOp, xt:VMInt, yt:VMInt) : NEG-OPCODE-INT
    (op:NegOp, xt:VMLong, yt:VMLong) : NEG-OPCODE-LONG
    (op:NegOp, xt:VMFloat, yt:VMFloat) : NEG-OPCODE-FLOAT
    (op:NegOp, xt:VMDouble, yt:VMDouble) : NEG-OPCODE-DOUBLE
    (op:InterpretOp, xt, yt) : false
    (op:ConvOp, xt:VMByte, yt:VMByte) : false
    (op:ConvOp, xt:VMByte, yt:VMInt) : false
    (op:ConvOp, xt:VMByte, yt:VMLong) : false
    (op:ConvOp, xt:VMByte, yt:VMFloat) : CONV-OPCODE-BYTE-FLOAT
    (op:ConvOp, xt:VMByte, yt:VMDouble) : CONV-OPCODE-BYTE-DOUBLE
    (op:ConvOp, xt:VMInt, yt:VMByte) : CONV-OPCODE-INT-BYTE
    (op:ConvOp, xt:VMInt, yt:VMInt) : false
    (op:ConvOp, xt:VMInt, yt:VMLong) : false
    (op:ConvOp, xt:VMInt, yt:VMFloat) : CONV-OPCODE-INT-FLOAT
    (op:ConvOp, xt:VMInt, yt:VMDouble) : CONV-OPCODE-INT-DOUBLE
    (op:ConvOp, xt:VMLong, yt:VMByte) : CONV-OPCODE-LONG-BYTE
    (op:ConvOp, xt:VMLong, yt:VMInt) : CONV-OPCODE-LONG-INT
    (op:ConvOp, xt:VMLong, yt:VMLong) : false
    (op:ConvOp, xt:VMLong, yt:VMFloat) : CONV-OPCODE-LONG-FLOAT
    (op:ConvOp, xt:VMLong, yt:VMDouble) : CONV-OPCODE-LONG-DOUBLE
    (op:ConvOp, xt:VMFloat, yt:VMByte) : CONV-OPCODE-FLOAT-BYTE
    (op:ConvOp, xt:VMFloat, yt:VMInt) : CONV-OPCODE-FLOAT-INT
    (op:ConvOp, xt:VMFloat, yt:VMLong) : CONV-OPCODE-FLOAT-LONG
    (op:ConvOp, xt:VMFloat, yt:VMFloat) : false
    (op:ConvOp, xt:VMFloat, yt:VMDouble) : CONV-OPCODE-FLOAT-DOUBLE
    (op:ConvOp, xt:VMDouble, yt:VMByte) : CONV-OPCODE-DOUBLE-BYTE
    (op:ConvOp, xt:VMDouble, yt:VMInt) : CONV-OPCODE-DOUBLE-INT
    (op:ConvOp, xt:VMDouble, yt:VMLong) : CONV-OPCODE-DOUBLE-LONG
    (op:ConvOp, xt:VMDouble, yt:VMFloat) : CONV-OPCODE-DOUBLE-FLOAT
    (op:ConvOp, xt:VMDouble, yt:VMDouble) : false
    (op:TagOp, xt, yt) :
      switch(type(op)) :
        BYTE-TYPE : TAG-OPCODE-BYTE
        CHAR-TYPE : TAG-OPCODE-CHAR
        INT-TYPE : TAG-OPCODE-INT
        FLOAT-TYPE : TAG-OPCODE-FLOAT
    (op:DetagOp, xt, yt) : DETAG-OPCODE
    (op:DerefOp, xt, yt) : DEREF-OPCODE
    (op:GCOp, xt, yt) : GC-OPCODE
    (op:ClassNameOp, xt, yt) : CLASS-NAME-OPCODE
    (op:PrintStackTraceOp, xt, yt) : PRINT-STACK-TRACE-OPCODE
    (op:CollectStackTraceOp, xt, yt) : COLLECT-STACK-TRACE-OPCODE

public defn op2-opcode (op:VMOp, xt:VMType, yt:VMType) :
  match(op, xt, yt) :
    (op:IntAddOp, xt:VMRef, yt:VMRef) : INT-ADD-OPCODE
    (op:IntSubOp, xt:VMRef, yt:VMRef) : INT-SUB-OPCODE
    (op:IntMulOp, xt:VMRef, yt:VMRef) : INT-MUL-OPCODE
    (op:IntDivOp, xt:VMRef, yt:VMRef) : INT-DIV-OPCODE
    (op:IntModOp, xt:VMRef, yt:VMRef) : INT-MOD-OPCODE
    (op:IntAndOp, xt:VMRef, yt:VMRef) : INT-AND-OPCODE
    (op:IntOrOp, xt:VMRef, yt:VMRef) : INT-OR-OPCODE
    (op:IntXorOp, xt:VMRef, yt:VMRef) : INT-XOR-OPCODE
    (op:IntShlOp, xt:VMRef, yt:VMRef) : INT-SHL-OPCODE
    (op:IntShrOp, xt:VMRef, yt:VMRef) : INT-SHR-OPCODE
    (op:IntAshrOp, xt:VMRef, yt:VMRef) : INT-ASHR-OPCODE
    (op:IntLtOp, xt:VMRef, yt:VMRef) : INT-LT-OPCODE
    (op:IntGtOp, xt:VMRef, yt:VMRef) : INT-GT-OPCODE
    (op:IntLeOp, xt:VMRef, yt:VMRef) : INT-LE-OPCODE
    (op:IntGeOp, xt:VMRef, yt:VMRef) : INT-GE-OPCODE
    (op:RefEqOp, xt:VMRef, yt:VMRef) : REF-EQ-OPCODE
    (op:RefNeOp, xt:VMRef, yt:VMRef) : REF-NE-OPCODE
    (op:EqOp, xt:VMLong, yt:VMRef) : EQ-OPCODE-REF
    (op:EqOp, xt:VMLong, yt:VMByte) : EQ-OPCODE-BYTE
    (op:EqOp, xt:VMLong, yt:VMInt) : EQ-OPCODE-INT
    (op:EqOp, xt:VMLong, yt:VMLong) : EQ-OPCODE-LONG
    (op:EqOp, xt:VMLong, yt:VMFloat) : EQ-OPCODE-FLOAT
    (op:EqOp, xt:VMLong, yt:VMDouble) : EQ-OPCODE-DOUBLE
    (op:NeOp, xt:VMLong, yt:VMRef) : NE-OPCODE-REF
    (op:NeOp, xt:VMLong, yt:VMByte) : NE-OPCODE-BYTE
    (op:NeOp, xt:VMLong, yt:VMInt) : NE-OPCODE-INT
    (op:NeOp, xt:VMLong, yt:VMLong) : NE-OPCODE-LONG
    (op:NeOp, xt:VMLong, yt:VMFloat) : NE-OPCODE-FLOAT
    (op:NeOp, xt:VMLong, yt:VMDouble) : NE-OPCODE-DOUBLE
    (op:AddOp, xt:VMByte, yt:VMByte) : ADD-OPCODE-BYTE
    (op:AddOp, xt:VMInt, yt:VMInt) : ADD-OPCODE-INT
    (op:AddOp, xt:VMLong, yt:VMLong) : ADD-OPCODE-LONG
    (op:AddOp, xt:VMFloat, yt:VMFloat) : ADD-OPCODE-FLOAT
    (op:AddOp, xt:VMDouble, yt:VMDouble) : ADD-OPCODE-DOUBLE
    (op:SubOp, xt:VMByte, yt:VMByte) : SUB-OPCODE-BYTE
    (op:SubOp, xt:VMInt, yt:VMInt) : SUB-OPCODE-INT
    (op:SubOp, xt:VMLong, yt:VMLong) : SUB-OPCODE-LONG
    (op:SubOp, xt:VMFloat, yt:VMFloat) : SUB-OPCODE-FLOAT
    (op:SubOp, xt:VMDouble, yt:VMDouble) : SUB-OPCODE-DOUBLE
    (op:MulOp, xt:VMByte, yt:VMByte) : MUL-OPCODE-BYTE
    (op:MulOp, xt:VMInt, yt:VMInt) : MUL-OPCODE-INT
    (op:MulOp, xt:VMLong, yt:VMLong) : MUL-OPCODE-LONG
    (op:MulOp, xt:VMFloat, yt:VMFloat) : MUL-OPCODE-FLOAT
    (op:MulOp, xt:VMDouble, yt:VMDouble) : MUL-OPCODE-DOUBLE
    (op:DivOp, xt:VMByte, yt:VMByte) : DIV-OPCODE-BYTE
    (op:DivOp, xt:VMInt, yt:VMInt) : DIV-OPCODE-INT
    (op:DivOp, xt:VMLong, yt:VMLong) : DIV-OPCODE-LONG
    (op:DivOp, xt:VMFloat, yt:VMFloat) : DIV-OPCODE-FLOAT
    (op:DivOp, xt:VMDouble, yt:VMDouble) : DIV-OPCODE-DOUBLE
    (op:ModOp, xt:VMByte, yt:VMByte) : MOD-OPCODE-BYTE
    (op:ModOp, xt:VMInt, yt:VMInt) : MOD-OPCODE-INT
    (op:ModOp, xt:VMLong, yt:VMLong) : MOD-OPCODE-LONG
    (op:AndOp, xt:VMByte, yt:VMByte) : AND-OPCODE-BYTE
    (op:AndOp, xt:VMInt, yt:VMInt) : AND-OPCODE-INT
    (op:AndOp, xt:VMLong, yt:VMLong) : AND-OPCODE-LONG
    (op:OrOp, xt:VMByte, yt:VMByte) : OR-OPCODE-BYTE
    (op:OrOp, xt:VMInt, yt:VMInt) : OR-OPCODE-INT
    (op:OrOp, xt:VMLong, yt:VMLong) : OR-OPCODE-LONG
    (op:XorOp, xt:VMByte, yt:VMByte) : XOR-OPCODE-BYTE
    (op:XorOp, xt:VMInt, yt:VMInt) : XOR-OPCODE-INT
    (op:XorOp, xt:VMLong, yt:VMLong) : XOR-OPCODE-LONG
    (op:ShlOp, xt:VMByte, yt:VMByte) : SHL-OPCODE-BYTE
    (op:ShlOp, xt:VMInt, yt:VMInt) : SHL-OPCODE-INT
    (op:ShlOp, xt:VMLong, yt:VMLong) : SHL-OPCODE-LONG
    (op:ShrOp, xt:VMByte, yt:VMByte) : SHR-OPCODE-BYTE
    (op:ShrOp, xt:VMInt, yt:VMInt) : SHR-OPCODE-INT
    (op:ShrOp, xt:VMLong, yt:VMLong) : SHR-OPCODE-LONG
    (op:AshrOp, xt:VMInt, yt:VMInt) : ASHR-OPCODE-INT
    (op:AshrOp, xt:VMLong, yt:VMLong) : ASHR-OPCODE-LONG
    (op:LtOp, xt:VMLong, yt:VMInt) : LT-OPCODE-INT
    (op:LtOp, xt:VMLong, yt:VMLong) : LT-OPCODE-LONG
    (op:LtOp, xt:VMLong, yt:VMFloat) : LT-OPCODE-FLOAT
    (op:LtOp, xt:VMLong, yt:VMDouble) : LT-OPCODE-DOUBLE
    (op:GtOp, xt:VMLong, yt:VMInt) : GT-OPCODE-INT
    (op:GtOp, xt:VMLong, yt:VMLong) : GT-OPCODE-LONG
    (op:GtOp, xt:VMLong, yt:VMFloat) : GT-OPCODE-FLOAT
    (op:GtOp, xt:VMLong, yt:VMDouble) : GT-OPCODE-DOUBLE
    (op:LeOp, xt:VMLong, yt:VMInt) : LE-OPCODE-INT
    (op:LeOp, xt:VMLong, yt:VMLong) : LE-OPCODE-LONG
    (op:LeOp, xt:VMLong, yt:VMFloat) : LE-OPCODE-FLOAT
    (op:LeOp, xt:VMLong, yt:VMDouble) : LE-OPCODE-DOUBLE
    (op:GeOp, xt:VMLong, yt:VMInt) : GE-OPCODE-INT
    (op:GeOp, xt:VMLong, yt:VMLong) : GE-OPCODE-LONG
    (op:GeOp, xt:VMLong, yt:VMFloat) : GE-OPCODE-FLOAT
    (op:GeOp, xt:VMLong, yt:VMDouble) : GE-OPCODE-DOUBLE
    (op:UltOp, xt:VMLong, yt:VMByte) : ULT-OPCODE-BYTE
    (op:UltOp, xt:VMLong, yt:VMInt) : ULT-OPCODE-INT
    (op:UltOp, xt:VMLong, yt:VMLong) : ULT-OPCODE-LONG
    (op:UleOp, xt:VMLong, yt:VMByte) : ULE-OPCODE-BYTE
    (op:UleOp, xt:VMLong, yt:VMInt) : ULE-OPCODE-INT
    (op:UleOp, xt:VMLong, yt:VMLong) : ULE-OPCODE-LONG
    (op:UgtOp, xt:VMLong, yt:VMByte) : UGT-OPCODE-BYTE
    (op:UgtOp, xt:VMLong, yt:VMInt) : UGT-OPCODE-INT
    (op:UgtOp, xt:VMLong, yt:VMLong) : UGT-OPCODE-LONG
    (op:UgeOp, xt:VMLong, yt:VMByte) : UGE-OPCODE-BYTE
    (op:UgeOp, xt:VMLong, yt:VMInt) : UGE-OPCODE-INT
    (op:UgeOp, xt:VMLong, yt:VMLong) : UGE-OPCODE-LONG

public defn branch2-opcode (op:VMOp, xt:VMType) :
  match(op, xt) :
    (op:IntLtOp, xt:VMRef) : JUMP-INT-LT-OPCODE
    (op:IntGtOp, xt:VMRef) : JUMP-INT-GT-OPCODE
    (op:IntLeOp, xt:VMRef) : JUMP-INT-LE-OPCODE
    (op:IntGeOp, xt:VMRef) : JUMP-INT-GE-OPCODE
    (op:EqOp, xt:VMRef) : JUMP-EQ-OPCODE-REF
    (op:EqOp, xt:VMByte) : JUMP-EQ-OPCODE-BYTE
    (op:EqOp, xt:VMInt) : JUMP-EQ-OPCODE-INT
    (op:EqOp, xt:VMLong) : JUMP-EQ-OPCODE-LONG
    (op:EqOp, xt:VMFloat) : JUMP-EQ-OPCODE-FLOAT
    (op:EqOp, xt:VMDouble) : JUMP-EQ-OPCODE-DOUBLE
    (op:NeOp, xt:VMRef) : JUMP-NE-OPCODE-REF
    (op:NeOp, xt:VMByte) : JUMP-NE-OPCODE-BYTE
    (op:NeOp, xt:VMInt) : JUMP-NE-OPCODE-INT
    (op:NeOp, xt:VMLong) : JUMP-NE-OPCODE-LONG
    (op:NeOp, xt:VMFloat) : JUMP-NE-OPCODE-FLOAT
    (op:NeOp, xt:VMDouble) : JUMP-NE-OPCODE-DOUBLE
    (op:LtOp, xt:VMInt) : JUMP-LT-OPCODE-INT
    (op:LtOp, xt:VMLong) : JUMP-LT-OPCODE-LONG
    (op:LtOp, xt:VMFloat) : JUMP-LT-OPCODE-FLOAT
    (op:LtOp, xt:VMDouble) : JUMP-LT-OPCODE-DOUBLE
    (op:GtOp, xt:VMInt) : JUMP-GT-OPCODE-INT
    (op:GtOp, xt:VMLong) : JUMP-GT-OPCODE-LONG
    (op:GtOp, xt:VMFloat) : JUMP-GT-OPCODE-FLOAT
    (op:GtOp, xt:VMDouble) : JUMP-GT-OPCODE-DOUBLE
    (op:LeOp, xt:VMInt) : JUMP-LE-OPCODE-INT
    (op:LeOp, xt:VMLong) : JUMP-LE-OPCODE-LONG
    (op:LeOp, xt:VMFloat) : JUMP-LE-OPCODE-FLOAT
    (op:LeOp, xt:VMDouble) : JUMP-LE-OPCODE-DOUBLE
    (op:GeOp, xt:VMInt) : JUMP-GE-OPCODE-INT
    (op:GeOp, xt:VMLong) : JUMP-GE-OPCODE-LONG
    (op:GeOp, xt:VMFloat) : JUMP-GE-OPCODE-FLOAT
    (op:GeOp, xt:VMDouble) : JUMP-GE-OPCODE-DOUBLE
    (op:UltOp, xt:VMByte) : JUMP-ULT-OPCODE-BYTE
    (op:UltOp, xt:VMInt) : JUMP-ULT-OPCODE-INT
    (op:UltOp, xt:VMLong) : JUMP-ULT-OPCODE-LONG
    (op:UleOp, xt:VMByte) : JUMP-ULE-OPCODE-BYTE
    (op:UleOp, xt:VMInt) : JUMP-ULE-OPCODE-INT
    (op:UleOp, xt:VMLong) : JUMP-ULE-OPCODE-LONG
    (op:UgtOp, xt:VMByte) : JUMP-UGT-OPCODE-BYTE
    (op:UgtOp, xt:VMInt) : JUMP-UGT-OPCODE-INT
    (op:UgtOp, xt:VMLong) : JUMP-UGT-OPCODE-LONG
    (op:UgeOp, xt:VMByte) : JUMP-UGE-OPCODE-BYTE
    (op:UgeOp, xt:VMInt) : JUMP-UGE-OPCODE-INT
    (op:UgeOp, xt:VMLong) : JUMP-UGE-OPCODE-LONG

  