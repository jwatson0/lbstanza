defpackage stz/vm-table :
  import core
  import collections
  import stz/vm-ir
  import stz/typeset
  import stz/vm
  import stz/algorithms
  import stz/vm-jit
  import stz/stable-arrays
  import stz/utils
  import stz/dyn-tree
  import stz/branch-table
  import stz/dl-ir

extern memcpy : (ptr<?>, ptr<?>, long) -> int

;============================================================
;================ Definition of all Tables ==================
;============================================================

public lostanza deftype VMTable :
  ;Branches
  branch-table:ref<BranchTable>
  
  ;Globals
  global-table:ref<Vector<LoadedGlobal|False>>  ;For globals
  var global-offsets:ref<StableLongArray>       ;For global offsets
  globals:ref<Buffer>

  ;Classes
  class-table:ref<ClassTable>
  class-name-table:ref<ClassNameTable>

  ;Constants
  consts:ref<Buffer>
  consts-data:ref<Buffer>

  ;Data
  var data-positions:ref<StableIntArray>
  data:ref<Buffer>

  ;Functions
  var functions:ref<StableLongArray>

  ;Externs
  var extern-addresses:ref<StableLongArray>

  ;Extern Defns
  var extern-defn-funcs:ref<StableIntArray>

  ;FileInfos
  fileinfos:ref<IntTable<FileInfo>>           

;============================================================
;======================= Initialization =====================
;============================================================

public lostanza defn VMTable (class-table:ref<ClassTable>, branch-table:ref<BranchTable>) -> ref<VMTable> :
  return new VMTable{
    ;Branches
    branch-table,
    
    ;Globals
    Vector<LoadedGlobal|False>(),
    StableLongArray(new Int{32}, new Long{-1L}),
    Buffer(),

    ;Classes
    class-table,
    ClassNameTable(),

    ;Constants
    Buffer(),
    empty-consts-buffer(),

    ;Data
    StableIntArray(new Int{32}, new Int{-1}),
    Buffer(),

    ;Functions
    StableLongArray(new Int{1024}, new Long{-1L}),

    ;Externs
    StableLongArray(new Int{32}, new Long{-1L}),
    
    ;Extern Defns
    StableIntArray(new Int{32}, new Int{-1}),
    
    ;FileInfos
    IntTable<FileInfo>()}

;============================================================
;================= Class Display Analysis ===================
;============================================================
public deftype ClassTable
public defmulti class? (this, c:Int) -> True|False
public defmulti instanceof? (t:ClassTable, child:Int, parent:TypeSet) -> True|False
public defmulti add (t:ClassTable, cs:Seqable<VMClass>) -> False
public defmulti add (t:ClassTable, l:TreeListener) -> False
public defmulti get (t:ClassTable, c:Int) -> VMClass
public defmulti children (t:ClassTable, c:Int) -> Tuple<Int>
public defmulti set-representation (t:ClassTable, c:Int) -> Tuple<Int>
public defmulti abstract-classes (t:ClassTable) -> IntSet

public defn ClassTable () :
  val class-table = IntTable<VMClass>()
  val class-tree = DynTree()

  defn instanceof? (child:Int, t:TypeSet) :
    let loop (t:TypeSet = t) :
      match(t) :
        (t:TopType) : true
        (t:SingleType) : parent?(class-tree, child, type(t))
        (t:AndType) : all?(loop, types(t))
        (t:OrType) : any?(loop, types(t))
    
  new ClassTable :
    defmethod add (this, cs0:Seqable<VMClass>) :
      val cs = to-tuple(cs0)
      defn node-state (c:VMClass) :
        match(c) :
          (c:VMAbstractClass) : NodeState(id(c), parents(c), children(c), false)
          (c) : NodeState(id(c), parents(c), [], true)      
      add(class-tree, seq(node-state, cs))
      for c in cs do :
        class-table[id(c)] = c
    defmethod add (this, l:TreeListener) :
      add(class-tree, l)
    defmethod get (this, c:Int) :
      class-table[c]
    defmethod class? (this, c:Int) :
      key?(class-table, c)
    defmethod instanceof? (this, child:Int, parent:TypeSet) :
      instanceof?(child, parent)
    defmethod children (this, c:Int) :
      all-leaves(class-tree, c)
    defmethod set-representation (this, c:Int) :
      all-children(class-tree, c)
    defmethod abstract-classes (this) :
      non-leaves(class-tree)

public defn subtype? (ct:ClassTable, a:TypeSet, b:TypeSet) :
  match(a) :
    (a:TopType) :
      let loop (t:TypeSet = b) :
        match(t) :
          (t:TopType) : true
          (t:SingleType) : false
          (t:AndType) : all?(loop, types(t))
          (t:OrType) : any?(loop, types(t))
    (a:SingleType) :
      instanceof?(ct, type(a), b)
    (a:AndType) :
      any?(subtype?{ct, _, b}, types(a))
    (a:OrType) :
      all?(subtype?{ct, _, b}, types(a))

;============================================================
;================== Class Name Table ========================
;============================================================

public deftype ClassNameTable
public defmulti add (t:ClassNameTable, names:Seqable<KeyValue<Int,String>>) -> False
public defmulti get (t:ClassNameTable, c:Int) -> StableString

public defn ClassNameTable () :
  val names = IntTable<StableString>()
  new ClassNameTable :
    defmethod add (this, entries:Seqable<KeyValue<Int,String>>) :
      for e in entries do :
        names[key(e)] = StableString(value(e))
    defmethod get (this, c:Int) :
      names[c]

public lostanza defn load-class-names (t:ref<VMTable>, names:ref<Seqable<KeyValue<Int,String>>>) -> ref<False> :
  add(t.class-name-table, names)
  return false

;============================================================
;=================== Global Loading =========================
;============================================================

defstruct LoadedGlobal :
  offset: Long
  size: Int
  roots: Tuple<Int>
  package: Symbol
with:
  printer => true

public defn roots (globals:Vector<LoadedGlobal|False>) -> Tuple<Int> :
  roots(globals, [])

public defn global-offset (vmt:VMTable, id:Int) -> Long :
  offset(global-table(vmt)[id] as LoadedGlobal)

public defn roots (globals:Vector<LoadedGlobal|False>, exclude:Seqable<Symbol>) -> Tuple<Int> :
  val exset = to-hashset<Symbol>(exclude)
  to-tuple $
    for g in filter-by<LoadedGlobal>(globals) seq-cat :
      if exset[package(g)] :
        []
      else :
        for r in roots(g) seq :
          to-int(offset(g) / 8L) + r  

public defn load-globals (vmt:VMTable, load-globals:Seqable<VMGlobal>, package:Symbol,
                          keep-existing-globals?:True|False) :
  val loaded? = IntSet()
  val gt = global-table(vmt)
  for g in load-globals do :
    val size* = (size(g) + 7) & -8
    add(loaded?, id(g))
    check-existing-entry() where :    
      defn* check-existing-entry () :
        match(get?(gt, id(g))) :
          (l:LoadedGlobal) :
            if keep-existing-globals? :
              fatal("New global size does not match existing global.") when size(l) != size*
              false ;Do nothing
            else :
              if size(l) <= size* : overwrite-entry(l)
              else : make-new-entry()
          (_:False) :
            make-new-entry()
      defn* overwrite-entry (l:LoadedGlobal) :
        val entry = LoadedGlobal(offset(l), size*, roots(g), package)
        put<LoadedGlobal>(gt, id(g), entry)
        void-roots(offset(l))
      defn* make-new-entry () :
        val offset = alloc-global(vmt, size*)
        val entry = LoadedGlobal(offset, size*, roots(g), package)
        put<LoadedGlobal>(gt, id(g), entry)
        set-global-offset(vmt, id(g), offset)
        void-roots(offset)
      defn* void-roots (offset:Long) :
        for r in roots(g) do :
          make-void(globals(vmt), to-int(offset / 8L) + r)
  ;Remove any unloaded globals        
  for i in 0 to length(gt) do :
    match(gt[i]) :
      (g:LoadedGlobal) :
        if /package(g) == package and not loaded?[i] :
          gt[i] = false
      (g:False) :
        false

lostanza defn set-global-offset (vmt:ref<VMTable>, d:ref<Int>, pos:ref<Long>) -> ref<False> :
  vmt.global-offsets = put(vmt.global-offsets, d, pos, new Long{-1L})
  return false

lostanza defn global-table (vmt:ref<VMTable>) -> ref<Vector<LoadedGlobal|False>> :
  return vmt.global-table
lostanza defn globals (vmt:ref<VMTable>) -> ref<Buffer> :
  return vmt.globals
lostanza defn alloc-global (vmt:ref<VMTable>, size:ref<Int>) -> ref<Long> :
  return new Long{alloc(vmt.globals, size.value)}

lostanza val VOID-MARKER:long = void-marker()
lostanza defn make-void (buffer:ref<Buffer>, i:ref<Int>) -> ref<False> :
  val mem:ptr<long> = buffer.mem
  mem[i.value] = VOID-MARKER
  return false

;============================================================
;===================== Class Loading ========================
;============================================================

public lostanza defn load-classes (vmt:ref<VMTable>, classes:ref<Seqable<VMClass>>) -> ref<False> :
  add(vmt.class-table, classes)
  return false

;============================================================
;===================== Const Loading ========================
;============================================================

public lostanza defn load-consts (vmt:ref<VMTable>, consts:ref<Tuple<VMConst>>) -> ref<False> :
  ;Put into const-positions table
  val nconsts = length(consts).value
  val const-space = nconsts * 8L
  val pos = alloc(vmt.consts, const-space) / 8
  for (var i:int = 0, i < nconsts, i = i + 1) :
    make-void(vmt.consts, new Int{(pos + i) as int})

  ;Compile data
  write-consts(vmt.consts-data, consts)

  return false

;============================================================
;=================== Const Compilation ======================
;============================================================

val BYTE-CONST-TAG = 0
val CHAR-CONST-TAG = 1
val INT-CONST-TAG = 2
val LONG-CONST-TAG = 3
val FLOAT-CONST-TAG = 4
val DOUBLE-CONST-TAG = 5
val TRUE-CONST-TAG = 6
val FALSE-CONST-TAG = 7
val LIST-CONST-TAG = 8
val STRING-CONST-TAG = 9
val SYMBOL-CONST-TAG = 10
val TYPE-CONST-TAG = 11
val FN-CONST-TAG = 12
val INTERNED-CONST-TAG = 13

defn empty-consts-buffer () -> Buffer :
  val buffer = Buffer()
  alloc(buffer, 4)
  set-int(buffer, 0, 0)
  buffer

defn write-consts (buffer:Buffer, consts:Tuple<VMConst>) :
  ;Write to byte buffer
  val bytebuffer = ByteBuffer()
  defn emit (v:VMValue) :
    match(v) :
      (v:Char) :
        put(bytebuffer, CHAR-CONST-TAG)
        put(bytebuffer, v)
      (v:Byte) :
        put(bytebuffer, BYTE-CONST-TAG)
        put(bytebuffer, v)
      (v:Int) :
        put(bytebuffer, INT-CONST-TAG)
        put(bytebuffer, v)
      (v:Long) :
        put(bytebuffer, LONG-CONST-TAG)
        put(bytebuffer, v)
      (v:Float) :
        put(bytebuffer, FLOAT-CONST-TAG)
        put(bytebuffer, v)
      (v:Double) :
        put(bytebuffer, DOUBLE-CONST-TAG)
        put(bytebuffer, v)
      (v:String) :
        put(bytebuffer, STRING-CONST-TAG)
        emit-chars(bytebuffer, v)
      (v:Symbol) :
        put(bytebuffer, SYMBOL-CONST-TAG)
        emit-chars(bytebuffer, to-string(v))
      (v:List) :
        put(bytebuffer, LIST-CONST-TAG)
        put(bytebuffer, length(v))
        do(emit, v)
      (v:True) :
        put(bytebuffer, TRUE-CONST-TAG)
      (v:False) :
        put(bytebuffer, FALSE-CONST-TAG)
      (v:VMTypeObject) :
        put(bytebuffer, TYPE-CONST-TAG)
        put(bytebuffer, to-long(id(id(v))))
      (v:VMClosure) :
        put(bytebuffer, FN-CONST-TAG)
        put(bytebuffer, to-long(id(id(v))))
      (v:VMInternedConst) :
        put(bytebuffer, INTERNED-CONST-TAG)
        put(bytebuffer, id(id(v)))
      (v) :
        fatal("Unrecognized constant: %~" % [v])
  do(emit{value(_)}, consts)

  ;Append byte buffer to buffer
  append!(buffer, bytebuffer)
  
  ;Increment number of constants
  val num-previous-consts = get-int(buffer, 0)
  set-int(buffer, 0, num-previous-consts + length(consts))

defn emit-chars (buffer:ByteBuffer, s:String) :
  val n = length(s)
  put(buffer, n)
  for c in s do :
    put(buffer, c)
  val endn = (n + 3) & -4
  for i in n to endn do :
    put(buffer, 0Y)
  
;============================================================
;=================== Build Fileinfo Table ===================
;============================================================
defn load-fileinfos (vmt:VMTable, infos:Seqable<FileInfoEntry>, offset:Int) :
  val infot = fileinfos(vmt)
  for e in infos do :
    val address = pc(e) + offset
    infot[address] = fileinfo(e)

lostanza defn fileinfos (vmt:ref<VMTable>) -> ref<IntTable<FileInfo>> :
  return vmt.fileinfos

;============================================================
;====================== Data Loading ========================
;============================================================

public lostanza defn load-data (vmt:ref<VMTable>, d:ref<VMData>) -> ref<False> :
  ;Put into data buffer
  val size = length(data(d)).value
  val size* = (size + 7L) & -8L
  val address = alloc(vmt.data, size*)
  ;val pos =  / 8
  ;Copy into buffer
  val src = addr!(data(d).data)
  val dst = vmt.data.mem + address
  call-c memcpy(dst, src, size)
  if non-negative?(vmt.data-positions, id(d)) : fatal("Data already defined.")
  vmt.data-positions = put(vmt.data-positions, id(d), new Int{(address / 8) as int}, new Int{-1})
  return false

public defn load-datas (vmt:VMTable, ds:Tuple<VMData>) :
  do(load-data{vmt, _}, ds)

lostanza defn non-negative? (xs:ref<Array<Int>>, i:ref<Int>) -> long :
  val l = length(xs).value
  if i.value < l :
    if get(xs,i).value >= 0 : return 1L
    else : return 0L
  else :
    return 0L

;============================================================
;====================== Extern Loading ======================
;============================================================

public lostanza defn load-extern (vmt:ref<VMTable>, e:ref<VMExtern>) -> ref<False> :
  val address = get(EXTERN-TABLE, name(e))
  vmt.extern-addresses = put(vmt.extern-addresses, id(e), address, new Long{-1L})
  return false

public defn load-externs (vmt:VMTable, es:Tuple<VMExtern>) :
  do(load-extern{vmt, _}, es)

;============================================================
;=================== Callback Loading =======================
;============================================================

public lostanza defn load-callback (vmt:ref<VMTable>, callback-index:ref<Int>, function-id:ref<Int>) -> ref<False> :
  vmt.extern-defn-funcs = put(vmt.extern-defn-funcs, callback-index, function-id, new Int{-1})
  return false
  
;============================================================
;===================== Function Loading =====================
;============================================================

public lostanza defn load-function (vmt:ref<VMTable>, id:ref<Int>, ef:ref<EncodedFunction>) -> ref<False> :
  val f = value(ef)
  vmt.functions = put(vmt.functions, id, f, new Long{0})

  ;Load fileinfos into fileinfo table
  ;load-fileinfos(vmt, fileinfos(ef), pos)
  
  return false

;============================================================
;========================= Utility ==========================
;============================================================

defn put<T> (xs:Vector<T|False>, k:Int, v:T) :
  if k >= length(xs) :
    lengthen(xs, k + 1, false)
  xs[k] = v
  
defn get?<?T> (xs:Vector<?T>, k:Int) -> T|False :
  if k < length(xs) : xs[k]
