defpackage stz/gen-trampoline :
  import core
  import collections
  import stz/code-emitter
  import stz/asm-ir
  import stz/backend
  import stz/asm-emitter
  import stz/c-trampoline

;============================================================
;============= Trampoline Assembly Generation ===============
;============================================================

;Emitter that emits according to the given backend.
defn emitter (backend:Backend) -> CodeEmitter :
  val label-counter = to-seq(0 to false)
  val o = current-output-stream()
  new CodeEmitter :
    defmethod emit (this, ins:Ins) :
      emit-asm(o, ins, backend)
    defmethod unique-label (this) :
      next(label-counter)

;Generate the trampoline assembly file.
defn generate-trampoline-asm-file (filename:String, backend:Backend) :
  with-output-file(FileOutputStream(filename),
    fn () :
      compile-c-trampoline-stub(backend, emitter(backend)))
  
;============================================================
;=================== Main Driver ============================
;============================================================

defn main () :
  generate-trampoline-asm-file("build/osx-trampoline.s", X64Backend())
  generate-trampoline-asm-file("build/linux-trampoline.s", L64Backend())
  generate-trampoline-asm-file("build/windows-trampoline.s", W64Backend())

;============================================================
;======================= Launch! ============================
;============================================================

main()