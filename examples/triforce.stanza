defpackage triforce :
  import core
  import collections

;         Using Sequences to Make Ascii Art
;         =================================

;Returns a sequence of functions, that when called in order
;draws a triangle.
defn triangle (n:Int) :
   for i in 0 to n seq :
      fn () :
         val m = i * 2 + 1
         do(print{' '}, 0 to (n - i - 1))
         do(print{'*'}, 0 to m)
         do(print{' '}, 0 to (n - i - 1))

;Takes a sequence of functions and returns a new sequence of
;functions that draws the original shape padded with left
;leading spaces and right trailing spaces.
defn pad (xs:Seqable<(() -> False)>, left:Int, right:Int) :
   for x in xs seq :
      fn () :
         do(print{' '}, 0 to left)
         x()
         do(print{' '}, 0 to right)

;Takes two shapes represented as sequences of functions, and
;returns a new sequence of functions that will draw the
;first shape to the left of the second shape.
defn beside (xs:Seqable<(() -> False)>, ys:Seqable<(() -> False)>) :
   for (x in xs, y in ys) seq :
      fn () :
         x()
         y()

;Draw a shape represented as a sequence of functions.
defn display (xs:Seqable<(() -> False)>) :
   for x in xs do :
      x()
      print('\n')

defn triforce (m:Int, n:Int) :
  if m <= 1 :
   triangle(n)
  else :
    val amount = n * (1 << (m - 2))
    val top = pad(triforce(m - 1, n), amount, amount)
    val bottom = beside(triforce(m - 1, n), pad(triforce(m - 1, n), 1, 0))
    cat(top, bottom)

;Draw a big triforce
display(triforce(6, 3))