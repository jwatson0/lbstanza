Q: What happens during package loading into the VM?

1) Look at this function in `stz-vm.stanza`.

   ```
   defn load (vm:VirtualMachine, vmps:Collection<VMPackage>, keep-existing-globals?:True|False)
   ```

   It is assumed that the input `VMPackage` packages are
   "self-contained". They internally use integer identifiers. What
   these identifiers mean is listed inside the `PackageIO` struct in
   the `VMPackage`.

2) Within `load`, there is this call:

   ```
   val load-unit = load-packages(vm-ids, vmps)
   ```

   This acts similar to a traditional linker, and assigns the proper
   global identifier to all of the references within each VMPackage.

   As an example, the `AllocIns` instruction contains a `types` field
   that holds the integer identifiers of the types of the objects that
   the instruction allocates.

   Before `load-packages`, the `types` field contains integer
   identifiers that are local to the VMPackage itself. After
   `load-packages`, the `types` field will contain identifiers that
   are globally assigned by the virtual machine.

   For types specifically, this global identifier is directly used as
   the header word for a heap-allocated object.

   This is most obvious when studying the encoding of `AllocIns` in
   `stz-vm-encoder.stanza`. Notice that the `type` field is directly
   encoded into the `ALLOC-OPCODE-LOCAL` instruction, which is then
   directly written to the heap.

Q: What are the globally meaningful identifiers for the core types?
E.g. Int, Float, True, False, etc?

1) See `stz-vm-ids.stanza`. There is a list called `fixed-ids`, and
   the VMIds table assigns a globally meaningful identifier to each of
   these core types.

   Currently, `VMIds` does not have a method for retrieving the global
   identifier corresponding to one of the core definitions, but it can
   be added simply.

Q: How does `stz-vm-encoder.stanza` work?

1) By the time the program reaches `stz/vm-encoder`, the VMPackage has
   already been assigned globally meaningful identifiers.

   The `EncodingResolver` can be used to query the virtual machine
   for any necessary information given an identifier.

   For example, the `marker?` function:

   ```
   defmulti marker? (r:EncodingResolver, n:Int) -> True|False
   ```

   Will return true if the given identifier corresponds to a type that
   should be represented using the "marker" object layout.

   The input identifier should be a globally meaningful identifier,
   one that exists in `VMPackage`.

Q: How does the dispatch dag work?

1) See `stz-dispatch-dag.stanza`. This is a "dependency-free"
   algorithm. This algorithm does not require any specific meanings on
   its identifiers. The algorithm guarantees that any contain identifiers
   contained in the output datastructure will have consistent meaning
   with the way they are given in the input datastructure.
